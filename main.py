import telebot
import buttons
import database
from rich import print
from telebot import types

bot = telebot.TeleBot('7536030659:AAHFlxvHwHEZ__yx-3ELcqvKctt08uJ_4bM')

users = {}


# database.delete_product()
# database.delete_user()
# database.delete_all_users()
# database.delete_all_products()
# database.add_product('Hawaiian Delight', 150, 1234567887654, 'A sweet and savory masterpiece! Juicy pineapple chunks, tender ham, and a layer of mozzarella come together on a flavorful tomato sauce base. A tropical twist on a pizza classic!', 'https://dinnerthendessert.com/wp-content/uploads/2023/06/Hawaiian-Pizza-7.jpg')

@bot.message_handler(commands=['start'])
def start_message(message):
    # –ø–æ–ª—É—á–∞–µ–º —Ç–≥ –∏–¥
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    checker = database.check_user(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ
    if checker:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        products = database.get_pr_name_id()
        print(products)

        # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        bot.send_message(user_id, 'Hello üëã, welcome to our <b>FastPizza</b> pizzeria bot üçï', parse_mode='HTML')
        bot.send_message(user_id, 'Menu ‚¨áÔ∏è', reply_markup=buttons.main_menu(products))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –±–∞–∑–µ
    elif not checker:
        bot.send_message(user_id, 'Hello üëã, send your name to register')

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
        bot.register_next_step_handler(message, get_name)


# –≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏
def get_name(message):
    user_id = message.from_user.id

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—é –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    username = message.text

    # –û—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–≤–µ—Ç
    bot.send_message(user_id, 'Send your phone number üìû', reply_markup=buttons.number_buttons())
    # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
    bot.register_next_step_handler(message, get_number, username)


# –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_number(message, name):
    user_id = message.from_user.id

    if message.contact:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        phone_number = message.contact.phone_number

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ
        database.register_user(user_id, name, phone_number, 'Not yet')
        bot.send_message(user_id, f'You have successfully registered ‚úÖ, <b>{name}</b> !', parse_mode='HTML',
                         reply_markup=telebot.types.ReplyKeyboardRemove()),

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        products = database.get_pr_name_id()
        bot.send_message(user_id, 'Menu ‚¨áÔ∏è', reply_markup=buttons.main_menu(products))

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç
    elif not message.contact:
        bot.send_message(user_id, 'Send contact using the button üìû', reply_markup=buttons.number_buttons())

        # –û–±—Ä–∞—Ç–Ω–æ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
        bot.register_next_step_handler(message, get_number, name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@bot.callback_query_handler(lambda call: call.data in ['plus', 'minus', 'to_cart', 'back'])
def get_user_product_count(call):
    # –°–æ—Ö—Ä–∞–Ω–∏–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.message.chat.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ +
    if call.data == 'plus':
        print(users)
        actual_count = users[user_id]['pr_count']
        print(actual_count)
        print(call)
        users[user_id]['pr_count'] += 1
        # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        bot.edit_message_reply_markup(chat_id=user_id,
                                      message_id=call.message.message_id,
                                      reply_markup=buttons.choose_product_count('plus', actual_count))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ -
    elif call.data == 'minus':
        print(users)
        actual_count = users[user_id]['pr_count']
        print(actual_count)
        print(call)
        users[user_id]['pr_count'] -= 1
        # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        bot.edit_message_reply_markup(chat_id=user_id,
                                      message_id=call.message.message_id,
                                      reply_markup=buttons.choose_product_count('minus', actual_count))

    # back
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–Ω–∞–∑–∞–¥'
    elif call.data == 'back':
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é
        products = database.get_pr_name_id()
        # –º–µ–Ω—è–µ–º –Ω–∞ –º–µ–Ω—é
        bot.edit_message_text('Menu ‚¨áÔ∏è',
                              user_id,
                              call.message.message_id,
                              reply_markup=buttons.main_menu(products))

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
    elif call.data == 'to_cart':
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        product_count = users[user_id]['pr_count']
        user_product = users[user_id]['pr_name']
        print(users)
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É(–∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        database.add_product_to_cart(user_id, user_product, product_count)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –º–µ–Ω—é
        products = database.get_pr_name_id()
        # –º–µ–Ω—è–µ–º –Ω–∞ –º–µ–Ω—é
        bot.edit_message_text('Product added to cart ‚úÖ \nAnything else ?',
                              user_id,
                              call.message.message_id,
                              reply_markup=buttons.main_menu(products))



@bot.callback_query_handler(lambda call: call.data in ['order', 'cart', 'clear_cart'])
def main_menu_handle(call):
    user_id = call.message.chat.id
    message_id = call.message.message_id

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É: –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
    if call.data == 'order':
        # –ü–æ–ª—É—á–∏–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cart = database.get_exact_user_cart(user_id)

        if not user_cart:
            # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
            bot.send_message(user_id, 'Your cart is empty, <b>add items to cart</b> before checking out ‚ùó', parse_mode='HTML')
            return

        # –£–¥–∞–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–µ—Ä—Ö–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        bot.delete_message(user_id, message_id)

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        full_text = '<b>Your order</b> üîΩ\n\n'
        user_info = database.get_user_number_name(user_id)
        full_text += f'üí¨ Name: {user_info[0]}\nüìû Phone number: {user_info[1]}\n\n'
        total_amount = 0

        for i in user_cart:
            full_text += f'{i[0]} x {i[1]} = {i[2]}\n'
            total_amount += i[2]

        # –ò—Ç–æ–≥ –∏ –ê–¥—Ä–µ—Å
        full_text += f'\n‚úÖ Total: {total_amount}'

        bot.send_message(user_id, full_text, reply_markup=buttons.get_accept_kb(), parse_mode='HTML')
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.register_next_step_handler(call.message, get_accept,  full_text)

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–æ—Ä–∑–∏–Ω–∞"
    elif call.data == 'cart':
        # –ø–æ–ª—É—á–∏–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cart = database.get_exact_user_cart(user_id)

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        full_text = 'Your cart üóë:\n\n'
        total_amount = 0

        for i in user_cart:
            full_text += f'{i[0]} x {i[1]} = {i[2]}\n'
            total_amount += i[2]

        # –ò—Ç–æ–≥
        full_text += f'\n‚úÖ Total: {total_amount}'

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.edit_message_text(full_text,
                              user_id,
                              message_id,
                              reply_markup=buttons.get_cart())

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    elif call.data == 'clear_cart':
        # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
        database.delete_product_from_cart(user_id)

        # –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–≤–µ—Ç
        bot.edit_message_text('Your cart has been emptied ‚úÖ',
                              user_id,
                              message_id,
                              reply_markup=buttons.main_menu(database.get_pr_name_id()))

# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
def get_accept(message, full_text):
    user_id = message.from_user.id
    message_id = message.message_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è message_id
    user_answer = message.text

    # –ø–æ–ª—É—á–∏–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    products = database.get_pr_name_id()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    if user_answer == 'Confirm':
        admin_id = -1002388355295
        # –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        database.delete_product_from_cart(user_id)
        user_info = database.get_user_number_name(user_id)

        # –æ—Ç–ø—Ä–∞–≤–∏–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        try:
            bot.send_message(admin_id, full_text.replace("Your", "<b>üÜï New</b>"), parse_mode='HTML')
        except telebot.apihelper.ApiTelegramException as e:
            print(f"Error sending message to admin: {e}")

        # –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–≤–µ—Ç
        try:
            bot.send_message(user_id, f'The order has been placed ‚úÖ\n\nWe will contact you at the number: üìû {user_info[1]} ', reply_markup=types.ReplyKeyboardRemove())
        except telebot.apihelper.ApiTelegramException as e:
            print(f"Error sending message to user: {e}")

    elif user_answer == 'Cancel':
        # –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–≤–µ—Ç
        try:
            bot.send_message(user_id, '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω  ‚úÖ', reply_markup=types.ReplyKeyboardRemove())
        except telebot.apihelper.ApiTelegramException as e:
            print(f"Error sending message to user: {e}")

    # –û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é
    try:
        bot.send_message(user_id, 'Menu üîΩ', reply_markup=buttons.main_menu(products))
    except telebot.apihelper.ApiTelegramException as e:
        print(f"Error sending message from menu: {e}")


@bot.callback_query_handler(lambda call: int(call.data) in database.get_pr_id())
def get_user_product(call):
    # –°–æ—Ö—Ä–∞–Ω–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.message.chat.id
    product_id = int(call.data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º data –≤ int –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product_details = database.get_product_details(product_id)

    if product_details:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        users[user_id] = {'pr_name': product_id, 'pr_count': 1}
        print(users)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üè∑Ô∏è Product name:\n\n{product_details['name']}\n\n"
            f"üìù Product description:\n\n{product_details['description']}\n\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if product_details['photo']:
            bot.send_photo(user_id, product_details['photo'], caption=message)
        else:
            bot.send_message(user_id, message)

        # –ü–æ–º–µ–Ω—è—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        bot.send_message(user_id, 'Select quantity üî¢:', reply_markup=buttons.choose_product_count())
    else:
        bot.send_message(user_id, "Sorry, product not found")




bot.infinity_polling()